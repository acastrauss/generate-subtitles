extends layout

block content
  script(src='/javascripts/circle-progress.min.js')

  style.
    body {
      background-color: rgb(22, 29, 29);
    }

    * {
      box-sizing: border-box;
    }

    .container {
      max-width: 500px;
      margin: 60px auto;
    }

    .container h1 {
      text-align: center;
      color: white;
    }

    form {
      background-color: white;
      padding: 30px;
    }

    form .input-group {
      margin-bottom: 15px;
    }

    form label {
      display: block;
      margin-bottom: 5px;
      margin-top: 12px;
    }

    form input {
      padding: 12px 20px;
      width: 100%;
      border: 1px solid #ccc;
    }

    .submit-btn {
      width: 100%;
      border: none;
      background: rgb(60, 57, 57);
      font-size: 18px;
      color: white;
      border-radius: 3px;
      padding: 20px;
      text-align: center;
      cursor: pointer;
    }

    #latestData, #progress, .downloadLink, #refreshButton, #timeEstimator, #startNewUpload, #processingData, #secondProcessingData {
      color: white;
      font-size: 24px;
      text-align: center;
    }

    #timeEstimator {
      font-size: 21px;
    }

    /*#srtDownloadLink, #vttDownloadLink, #txtDownloadLink {*/
    /*  display: none;*/
    /*}*/

    #finishedData {
      white-space: pre;
      text-align: left;
      font-size: 18px;
      color: white;
      margin-top: -18px;
      margin-bottom: 29px;
    }

    #refreshButton, #startNewUpload {
      cursor: pointer;
      text-decoration: underline;
      margin-top: 29px;
      display: none;
      font-size: 18px;
    }

    #startNewUpload {
      margin-top: 45px;
    }

    #processingData {
      display: none;
      white-space: pre;
      margin-bottom: 35px;
    }

    #secondProcessingData, #latestData {
      white-space: pre;
      display: none;
    }

    .downloadLink {
      color: white;
      font-size: 19px;
      text-align: center;
      margin-bottom: 10px;
    }

    #githubLogo {
      width: 100px;
      float: right;
    }

    #languageLabel, #modelLabel {
      cursor: pointer;
    }

    #upload-button {

    }

    #translate {
      position: relative;
      top: -23px;
      left: 6px;
      height: 16px;
      opacity: 0.8;
    }

    .translateHolder {
      height: 32px;
    }

    .no-pointer-events {
      pointer-events: none;
    }

    .circle-progress-value {
      stroke-width: 50px;
      stroke: hsl(160, 63%, 55%);
    }

    .circle-progress-circle {
      stroke-width: 50px;
      stroke: #999;
    }

    .circle-progress-text {
      fill: white;
    }

    .progress svg {
      height: 202px;
      width: 202px;
    }

    .circle-progress-value {
      stroke-width: 50px;
      stroke: white;
    }

    .circle-progress-text {
      fill: black;
    }

    .circle-progress-circle {
      stroke-width: 50px;
      stroke: #bdbdbd;
    }

    .progress {
      margin: 0 auto;
      text-align: center;
    }

    #timeEstimator {
      white-space: pre;
    }

  a(href='https://github.com/mayeaux/generate-subtitles' target='_blank')
    img#githubLogo(src='/images/inverted.png')

  .container
    h1#header File Upload
    form#form
      .input-group
        label(for='file') Select (or drop) file
        input#file(type='file')
        label#languageLabel Language (aka English)
        input#language(type='text' value=previousLanguage placeholder="Leave empty for Auto-Detect")
        label#modelLabel Model (aka medium)
        input#model(type='text' value=previousModel placeholder="Leave empty for medium")
        div.translateHolder
          label#translateLabel Translate to different languages
          input#translate(type='checkbox')
        button#upload-button.submit-btn(type='submit') Upload

    //DISPLAY DIFFERENT DATA
    p#progress
    .progress
    p#timeEstimator
    p#latestData
    p#processingData
    p#secondProcessingData
    p#finishedData

    // kind of duplicated, not sure it's needed
    a#startNewUpload(onclick='(function(){ window.open(window.location.href, \'_blank\').focus(); })();') Start Another Transcription

    a.downloadLink#srtDownloadLink(href='#')

    a.downloadLink#vttDownloadLink(href='#')

    a.downloadLink#txtDownloadLink(href='#')

    a#refreshButton(onclick='(function(){ window.open(window.location.href, \'_blank\').focus(); })();') Start New Transcription
  script.
    l = console.log;

    let circleProgress;

    let ffmpeg;

    $(document).ready(function () {
      circleProgress = new CircleProgress('.progress', {
        max: 100,
        value: 100,
        textFormat: 'vertical',
      });

      $('.progress').hide();

      l('ready now');
      // new CircleProgress('.progress');
      // console.log("ready!");

      // percent divided by 100

      // $('#circle').circleProgress({
      //   value: 0.33,
      //   size: 100,
      //   // fill: {
      //   //   gradient: ["red", "orange"]
      //   // }
      // });

      // $('#circle').circleProgress({
      //   max: 100,
      //   value: 10,
      //   textFormat: 'vertical'
      // });


    });

    let uploadFinished = false;

    const getVideoDuration = (file) =>
      new Promise((resolve, reject) => {
        const reader = new FileReader();
        l(file);
        l(reader);
        reader.onload = (e) => {
          l('e');
          l(e);
          l('loading');
          l(reader);
          const media = new Audio(reader.result);
          l(media);
          media.onerror = function(error){
            l('error');
            l(error);
            reject(error);
          }
          media.onloadedmetadata = () => resolve(media.duration);
        };
        l('reading')
        reader.readAsDataURL(file);
        reader.onerror = function(error){
          l('error');
          l(error)
          reject(error);
        }
      });

    $(document).ready(async function () {
      const {createFFmpeg} = FFmpeg;
      l(createFFmpeg);

      ffmpeg = createFFmpeg({
        corePath: '/javascripts/ffmpeg-core.js',
        workerPath: '/javascripts/ffmpeg-core.worker.js',
        wasmPath: '/javascripts/ffmpeg-core.wasm',
        log: true
      });

      ffmpeg.onRuntimeInitialized = function () {
        l('runtime ready');
      };

      l('ffmpeg');
      l(ffmpeg);

      // await ffmpeg.load();



      // swal data with languages
      $("#languageLabel").on('click', function () {
        l('models');
        l(models);
        return Swal.fire({
          title: 'The following languages are valid',
          text: languages.join(' '),
          icon: 'question',
          confirmButtonText: 'Cool'
        })
      });

      // swal data with languages
      $("#modelLabel").on('click', function () {
        l('models');
        l(models);
        return Swal.fire({
          title: 'The following models are valid',
          text: models.join(' '),
          icon: 'question',
          confirmButtonText: 'Cool'
        })
      });

    });

    function unescapeHTML(escapedHTML) {
      return escapedHTML.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&');
    }

    // had to do this because of the greater than thing (remove backslash)
    // otherwise could do const forHumans = #/{forHumans}
    eval(unescapeHTML(`#{forHumans}`));

    // l(forHumans(100));
    // TODO: pass from frontend
    const languagesString = 'Afrikaans,Albanian,Amharic,Arabic,Armenian,Assamese,Azerbaijani,Bashkir,Basque,Belarusian,Bengali,Bosnian,Breton,Bulgarian,Burmese,Castilian,Catalan,Chinese,Croatian,Czech,Danish,Dutch,English,Estonian,Faroese,Finnish,Flemish,French,Galician,Georgian,German,Greek,Gujarati,Haitian,Haitian Creole,Hausa,Hawaiian,Hebrew,Hindi,Hungarian,Icelandic,Indonesian,Italian,Japanese,Javanese,Kannada,Kazakh,Khmer,Korean,Lao,Latin,Latvian,Letzeburgesch,Lingala,Lithuanian,Luxembourgish,Macedonian,Malagasy,Malay,Malayalam,Maltese,Maori,Marathi,Moldavian,Moldovan,Mongolian,Myanmar,Nepali,Norwegian,Nynorsk,Occitan,Panjabi,Pashto,Persian,Polish,Portuguese,Punjabi,Pushto,Romanian,Russian,Sanskrit,Serbian,Shona,Sindhi,Sinhala,Sinhalese,Slovak,Slovenian,Somali,Spanish,Sundanese,Swahili,Swedish,Tagalog,Tajik,Tamil,Tatar,Telugu,Thai,Tibetan,Turkish,Turkmen,Ukrainian,Urdu,Uzbek,Valencian,Vietnamese,Welsh,Yiddish,Yoruba';
    const languages = languagesString.split(',');
    const modelsString = 'tiny.en,tiny,base.en,base,small.en,small,medium.en,medium,large';
    const models = modelsString.split(',');


    const previousModel = localStorage.getItem('model');
    const previousLanguage = localStorage.getItem('language');
    const previousShouldTranslate = localStorage.getItem('shouldTranslate');

    l('previous should translate');
    l(previousShouldTranslate);

    document.getElementById('model').value = previousModel;
    document.getElementById("language").value = previousLanguage;
    $('#translate').prop('checked', previousShouldTranslate === 'true');
    // const previousLanguage = localStorage.getItem('language');


    const ipAndPort = location.host;
    const randomNumber = Math.round(Math.random() * 1000000000000);

    // grab elements
    const form = document.getElementById("form");
    const progressDiv = document.getElementById('progress');
    const timeRemainingDiv = document.getElementById('timeEstimator');
    const header = document.getElementById('header')
    const refreshButton = document.getElementById('refreshButton');
    const latestData = document.getElementById('latestData');
    const file = document.getElementById("file");
    const body = document.querySelector('body');


    form.addEventListener("submit", submitForm);

    let uploadStarted = false;

    const nodeEnvironment = `#{nodeEnv}`

    const selectElement = document.querySelector('#file');

    l('selecteleemnt');
    l(selectElement);

    let videoDuration;

    // selectElement.addEventListener('change', async function () {
    //   l('getting video duration!');
    //   // l(new Date())
    //   // freezes everything up
    //   // videoDuration = getVideoDuration(file.files[0]).then(function(response){
    //   //   videoDuration = response;
    //   //   l(new Date())
    //   //   l('videoDuration');
    //   //   l(videoDuration);
    //   //
    //   // });
    // });

    async function submitForm(e) {
      e.preventDefault();

      let language = document.getElementById("language").value;
      const model = document.getElementById("model").value;

      const formData = new FormData();

      const passedFile = file.files[0]

      if(!passedFile){
        return Swal.fire({
          title: 'You didn\'t pass a file',
          icon: 'error',
          confirmButtonText: 'Cool'
        })
      }

      // http or https
      const protocol = document.location.protocol.slice(0, -1)
      const servedWithSSL = protocol === 'https'

      l('passedFile');
      l(passedFile)


      if(nodeEnvironment === 'production' && servedWithSSL){

      // force upload testing
      // if(1 === 1){
        // TODO: change this to onchange
        const oneHundredMBinBytes = 100000000;

        // swal with the error
        if (passedFile.size > oneHundredMBinBytes) {
          // put back upload button
          $('#upload-button').html('Upload').removeClass('no-pointer-events');

          return Swal.fire({
            title: 'Please upload something smaller than 100MB, Cloudflare limit for now',
            icon: 'error',
            confirmButtonText: 'Cool'
          })
        }

        $('#upload-button').addClass('no-pointer-events');

        setTimeout(function () {
          $('#upload-button').html('Checking your upload length..')
        }, 500)

        try {
          l('geting duration');
          // TODO: get here
          // TODO: catch possible errors
          videoDuration = await getVideoDuration(passedFile);
          l(videoDuration);
          l('duration');
          l(videoDuration);
        } catch (err){
          /// just let them advance if there's an error, happens with .MOV (format error)
          //  and uploads over 500MB (because of Chrome)
          l('err');
          l(err);
        }

        // 3600
        if (videoDuration && videoDuration > 3600) {
          $('#upload-button').html('Upload').removeClass('no-pointer-events');
          videoDuration = 0;
          return Swal.fire({
            title: 'The video is too long',
            text: 'To share time more evenly 1h+ uploads are not allowed',
            icon: 'error',
            confirmButtonText: 'Cool'
          })
        }
      }

      function capitalize(s) {
        return s[0].toUpperCase() + s.slice(1);
      }

      // capitalize for people who can't follow specs
      language = language && capitalize(language);

      const existsAndNotValidLanguage = language && !languages.includes(language)

      if(existsAndNotValidLanguage){
        return Swal.fire({
          title: 'Can only use one of the following languages',
          text: languages,
          icon: 'error',
          confirmButtonText: 'Cool'
        })
      }

      const modelExistsAndNotValid = model && !models.includes(model);

      if (modelExistsAndNotValid) {
        return Swal.fire({
          title: 'Can only use one of the following models',
          text: models,
          icon: 'error',
          confirmButtonText: 'Cool'
        })
      }

      const translateIsChecked = $('#translate').is(':checked');

      formData.append("file", passedFile);
      formData.append('language', language);
      formData.append('model', model);
      formData.append('websocketNumber', randomNumber);
      formData.append('shouldTranslate', translateIsChecked);

      localStorage.setItem('model', model);
      localStorage.setItem('language', language);
      localStorage.setItem('shouldTranslate', translateIsChecked);

      // Display the key/value pairs
      for (const pair of formData.entries()) {
        console.log(pair[0] + ': ' + pair[1]);
      }
      const fileName = document.getElementById('file').files[0].name;
      l(`filename: ${fileName}`)

      const httpProtocol = window.location.protocol;

      let httpPrepend;
      if (httpProtocol === "https:") {
        httpPrepend = "https";
      } else {
        httpPrepend = "http";
      }

      const uploadUrl = `${httpPrepend}://${ipAndPort}/file`;

      var ajax = new XMLHttpRequest();
      let originalDate, timeElapsedInSeconds, estimatedUploadTimeInSeconds, estimatedSecondsRemaining, percentUploadDone;

      let alreadyUploadedAmountInMB;
      /** TIME COUNTDOWN FUNCTIONALITY **/
      ajax.upload.addEventListener("progress", function(event){
        l(event);
        form.style.display = 'none';
        document.getElementById('startNewUpload').style.display = 'block';

        alreadyUploadedAmountInMB = _.round(event.loaded / (1000 * 1000), 1);
        let totalFileSizeInMB = _.round(event.total / (1000 * 1000), 1);

        l('totalFileSizeInMB');
        l(totalFileSizeInMB);

        l('alreadyUploadedAmountInMB');
        l(alreadyUploadedAmountInMB);

        var percent = Math.round((alreadyUploadedAmountInMB / totalFileSizeInMB) * 100);

        percentUploadDone = percent

        progressDiv.innerHTML = `${percent}% uploaded`;

        const currentTime = new Date();
        // get time in seconds between upload start time and now
        timeElapsedInSeconds = Math.round((currentTime - originalDate) / 1000);

        // estimate how many seconds remaining based on percent
        estimatedUploadTimeInSeconds = Math.round(timeElapsedInSeconds * (100/percent));

        // time left is difference of estimated time and elapsed time
        estimatedSecondsRemaining = estimatedUploadTimeInSeconds - timeElapsedInSeconds;

        l('estimated seconds remaining');
        l(estimatedSecondsRemaining);


        l('percent');
        l(percent);

        l('timeElapsedInSeconds')
        l(timeElapsedInSeconds);

        circleProgress.attr({
          max: 100,
          value: Number(percentUploadDone),
        });
        if(percent === 100){
          circleProgress.attr({
            max: 100,
            value: 0,
          });
          $('.progress').hide();
        } else {
          $('.progress').show();
        }


        // start up functionality to update estimate every second
        if(!uploadStarted){
          uploadStarted = true;
          originalDate = new Date();
          setInterval(function(){

            const estimatedSecondsIsInfinity = estimatedSecondsRemaining === Infinity;
            const estimatedSecondsIsNan = isNaN(estimatedSecondsRemaining);


            Math.round(alreadyUploadedAmountInMB / timeElapsedInSeconds * 10) / 10

            const uploadSpeedInMBs = _.round((alreadyUploadedAmountInMB / timeElapsedInSeconds), 1);

            const valueIsValid = !estimatedSecondsIsInfinity && !estimatedSecondsIsNan;
            if(!valueIsValid) return

            timeRemainingDiv.innerHTML =
                    `[${timeElapsedInSeconds}/${estimatedUploadTimeInSeconds}s] ${forHumans(estimatedSecondsRemaining)} remaining
                    \n Total File Size: ${totalFileSizeInMB} MB, \nAlready Uploaded: ${alreadyUploadedAmountInMB} MB \nUpload Speed: ${uploadSpeedInMBs} MB/s,
                    `;
          }, 1000)
        }
      }, false);

      /** response from endpoint? **/
      ajax.addEventListener("load", function(res){
        l('hit the backend!');
        hitTheBackend = true;
        // document.getElementById('processingData').style.display = 'block';
        document.getElementById('latestData').style.display = 'block';
        console.log(res)
        progressDiv.style.display = 'none';
        timeRemainingDiv.style.display = 'none';

        header.innerHTML = 'Processing..';
        document.getElementById('startNewUpload').style.marginTop = '29px';
      }, false);
      // TODO: implement these
      // ajax.addEventListener("error", errorHandler, false);
      // ajax.addEventListener("abort", abortHandler, false);
      ajax.open("POST", uploadUrl); //
      ajax.send(formData);
    }

    let placeInQueue = 0;

    /** WEBSOCKET CONNECTION FUNCTIONALITY BEGINS **/
    const httpProtocol = window.location.protocol;

    let wssPrepend;
    if (httpProtocol === "https:") {
      wssPrepend = "wss";
    } else {
      wssPrepend = "ws";
    }

    const websocketConnection = new WebSocket(`${wssPrepend}://${ipAndPort}/${randomNumber}`);

    let myUploadStarted = false;
    let hitTheBackend = false;
    websocketConnection.onclose = function (event) {
      // dont show popup if websocket closed because finished
      if(uploadFinished) return
      return Swal.fire({
        title: 'Websocket disconnected',
        text: 'Your websocket connection was disconnected, please refresh to start a new upload',
        icon: 'error',
        showCancelButton: true,
        confirmButtonText: 'Refresh now',
      }).then((result) => {
        /* Read more about isConfirmed, isDenied below */
        if (result.isConfirmed) {
          window.location.reload();
        }
      })

    };

    let loopStarted, processingData, timeRemaining, formattedProgressData = false;

    function decrementBySecond(timeRemainingValues) {
      let { secondsRemaining, minutesRemaining, hoursRemaining, string } = timeRemainingValues;

      if(secondsRemaining === 0 || secondsRemaining === '00'){
        if(minutesRemaining > 0){
          secondsRemaining = 59;
          minutesRemaining = minutesRemaining - 1;
        }
      } else {
        secondsRemaining = secondsRemaining - 1;
      }


      if (minutesRemaining === 0 || minutesRemaining === '00') {
        if(hoursRemaining > 0){
          minutesRemaining = 59;
          hoursRemaining = hoursRemaining - 1;
        } else {
          // no recharge, leave at zero
          // minutesRemaining = minutesRemaining - 1;
        }
      } else {
        // minutesRemaining = minutesRemaining - 1;
      }

      if (minutesRemaining.toString()?.length === 1) {
        minutesRemaining = '0' + minutesRemaining;
      }

      if (secondsRemaining.toString()?.length === 1) {
        secondsRemaining = '0' + secondsRemaining;
      }


      let thingString = `${minutesRemaining}:${secondsRemaining}`;
      if(hoursRemaining){ thingString = `${hoursRemaining}:${thingString}` }

      timeRemaining = {
        secondsRemaining,
        minutesRemaining,
        hoursRemaining,
        string: thingString
      }
    }


    websocketConnection.onmessage = function (event) {
      const data = JSON.parse(event.data);

      console.log(event.data);

      /** WHEN WEBSOCKET SAYS COMPLETED **/
      // TODO: move to bottom of conditional blocks
      if (data.status === 'Completed') {
        uploadFinished = true;


        if(window.decrementInterval) clearInterval(window.decrementInterval)

        latestData.innerHTML = 'Congratulations, you\'re done!';

        document.getElementById('finishedData').innerHTML = data.detailsString;

        header.innerHTML = 'Transcription Completed';
        document.getElementById('processingData').style.display = 'none';

        // show refresh button
        refreshButton.style.display = 'block';

        // TODO: add two more download buttons

        l(data.url)

        document.getElementById('startNewUpload').style.display = 'none';

        websocketConnection.close()

        setTimeout(function(){
          window.location.href = `/player/${data.filename}`
        }, 2000)

      } else if (data.message === 'queue'){
        // TODO: pull out into func
        placeInQueue = data.placeInQueue;
        if (placeInQueue === 1) {
          latestData.innerHTML = `You're next up`;
        } else if(placeInQueue > 1){
          latestData.innerHTML = `There are ${placeInQueue} people ahead of you`;
        }

        if(placeInQueue === 0){
          latestData.innerHTML = `Starting now...`;
        }

        // TODO: likely a bug here
      } else if (data === 'finishedProcessing' && uploadStarted) {
        // placeInQueue = data.placeInQueue;
        placeInQueue = placeInQueue - 1
        // TODO: hate how this is duped, so annoying
        if (placeInQueue === 1) {
          latestData.innerHTML = `You're next up`;
        } else if(placeInQueue > 1){
          latestData.innerHTML = `There are ${placeInQueue} people ahead of you`;
        }

        if (placeInQueue === 0) {
          latestData.innerHTML = `Starting now...`;
        }

      // WEBSOCKET DATA COMING FROM THE BACKEND
      } else if (data.message === 'websocketData') {
        l('data');
        l(data);
        const myUpload = data.ownershipPerson === 'you';
        l('my upload');
        l(myUpload);
        const processNumber = data.serverNumber; // 1 || 2, really means process
        const percentDone = data.percentDone;
        if(myUpload){
          timeRemaining = data.timeRemaining;
        }
        processingData = data.processingData;
        formattedProgressData = data.formattedProgress;

        // by default let to 'latest processing'
        // TODO: this is misnamed
        let textToSay = `Latest processing data (process ${processNumber})\n`;
        if(myUpload){
          /** it's your upload **/
          // data is no longer relevant
          document.getElementById('secondProcessingData').style.display = 'none';
          myUploadStarted = true; // force this to true
          textToSay = ``;
          latestData.style.display = 'none';
        }

        // every second it grabs it from the ether and decrements it and rebuilds the string

        const eitherProcess = processNumber ===  1 || processNumber === 2;
        l('either process');
        l(eitherProcess);

        // TODO: need my upload finished? && !myUploadFinished
        if(eitherProcess && myUpload && hitTheBackend && myUploadStarted){
          l('found my data');
          document.getElementById('processingData').style.display = 'block';
          // actual process data coming back
          if (Number(percentDone) > 0){
            circleProgress.attr({
              max: 100,
              value: data.percentDone,
            });
            if (data.percentDone === 100) {
              $('.progress').hide();
            } else {
              $('.progress').show();
            }


            if(!loopStarted){
              loopStarted = true;

              if(!window.decrementInterval){
                window.decrementInterval = setInterval(function () {
                  l('time remaining');
                  l(timeRemaining);

                  l('decrementing');
                  decrementBySecond(timeRemaining)

                  l('time remaining');
                  l(timeRemaining);


                  const stringToUse = `[${formattedProgressData.percentDone}] ${timeRemaining.string} Remaining, Speed ${formattedProgressData.speed}f/s`

                  document.getElementById('processingData').innerHTML = `${textToSay}${stringToUse}`;
                }, 1000)
              }

              // window.decrementInterval = setInterval(function(){
              //   l('time remaining');
              //   l(timeRemaining);
              //
              //   l('decrementing');
              //   decrementBySecond(timeRemaining)
              //
              //   l('time remaining');
              //   l(timeRemaining);
              //
              //
              //   const stringToUse = `[${formattedProgressData.percentDone}] ${timeRemaining.string} Remaining, Speed ${formattedProgressData.speed}f/s`
              //
              //   document.getElementById('processingData').innerHTML = `${textToSay}${stringToUse}`;
              // }, 1000)
            }
          } else {
            document.getElementById('processingData').innerHTML = `${textToSay}Transcription starting soon..`;
          }
        }

        // TODO: this seems off
        // update the process 2 info if appropriate
        if (processNumber === 1 && !myUpload && !myUploadStarted && hitTheBackend) {
          l('getting process 1 data');
          document.getElementById('processingData').style.display = 'block';
          document.getElementById('processingData').innerHTML = `${textToSay}\n${data.processingData}`;
        }
        // update the process 2 info if appropriate
        if (processNumber === 2 && !myUpload && !myUploadStarted && hitTheBackend) {
          l('getting process 2 data');
          document.getElementById('secondProcessingData').style.display = 'block';
          document.getElementById('secondProcessingData').innerHTML = `${textToSay}\n${data.processingData}`;
        }

      } else if (data.message === 'fileDetails') {
        l('file details data');
        const niceDate = new Date().toString().replace(/GMT.*/g,"");
        const niceString = `startedAt: ${niceDate}`;
        document.getElementById('finishedData').innerHTML = data.fileDetails + niceString;
      } else if (data.message === 'languageUpdate') {
        // Get a reference to the last interval + 1
        const interval_id = window.setInterval(function () {
        }, Number.MAX_SAFE_INTEGER);

        // Clear any timeout/interval up to that id
        for (let i = 1; i < interval_id; i++) {
          window.clearInterval(i);
        }
        document.getElementById('processingData').innerHTML = data.languageUpdate;

      } else if (data.message === 'error') {
        document.getElementById('processingData').innerHTML = data.text;
      } else {
        latestData.innerHTML = data;
      }
    };



    /** DRAG AND DROP FILES **/
    body.ondragover = file.ondragenter = function (evt) {
      evt.preventDefault();
    };

    body.ondrop = function (evt) {
      evt.preventDefault();

      // only add the first file
      let list = new DataTransfer();
      let firstPassedFile = evt.dataTransfer.files[0];
      list.items.add(firstPassedFile);

      if(evt?.dataTransfer?.files){
        file.files = list.files;

      } else {
        l('no files found');
      }
    };

    // circle progress bar
    // new CircleProgress('.progress', {
    //   max: 100,
    //   value: 60,
    //   textFormat: 'vertical',
    // });



